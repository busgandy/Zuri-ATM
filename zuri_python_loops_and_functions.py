# -*- coding: utf-8 -*-
"""Zuri-Python-Loops-And-Functions.ipynb

Author: Busayo Olushola; gideonbusayo@gmail.com

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tAxSlrw-8iih0h-hnJhwMiGGEVipP_tl

**Zuri-Python-Loops-And-Functions**
"""

import random
from datetime import datetime

database = {1299365790: ['b', 'c', 'a', 'd'], 8472256331: ['q', 'w', 'e', 'r'],
            5722564313: ["Seyi@zuri.com", "Seyi", "Zuri", "passwordSeyi"],
            8362908627: ["mike@zuri.com", "Mike", "Zuri", "passwordMike"],
            2736482567: ["love@zuri.com", "Love", "Zuri", "passwordLove"]}


def main():
    firstUserCase()


def firstUserCase():
    print("===============================")
    print("WELCOME TO BUSGANDA-MFB")
    print("===============================")

    # This makes sure the user enters a number as input and treats the error as an exception
    while True:
        try:
            haveAccount = int(input(
                "DO YOU HAVE AN ACCOUNT WITH US? \n =============================== \n RESPOND WITH THE FOLLOWING "
                "KEYS \n =============================== \n (1). YES \n (2). NO \n")
            )

            break
        except ValueError:
            print("Oops!  That was no valid number.  Try again... \n")

    # This checks if the user responds appropriately
    if haveAccount == 1:
        login()
    elif haveAccount == 2:
        register()
    else:
        print("===============================")
        print("YOU HAVE SELECTED AN INVALID OPTION \n")
        firstUserCase()


def login():
    print("===============================")
    print("WELCOME TO BUSGANDA-MFB")
    print("===============================")
    now = datetime.now()
    today = now.strftime("%d/%m/%Y %H:%M:%S")
    # This prints the date format
    print(today)
    print("=============================== \n")
    print("PLEASE LOGIN")
    print("=============================== \n")

    while True:
        try:
            accountNumberFromUser = int(input("WHAT IS YOUR ACCOUNT NUMBER: \n"))
            break
        except ValueError:
            print("Oops!  That was no valid number.  Try again... \n")
    # This checks if the user input is in the database
    if accountNumberFromUser in database.keys():
        password = input("WHAT IS YOUR PASSWORD: \n")
        # This checks if the user's password input is also the password of the user in the database
        if database[accountNumberFromUser][3] == password:
            bankOperation(database[accountNumberFromUser])
        else:
            print("INVALID PASSWORD, TRY AGAIN. \n")
            login()
    else:
        print(
            "===============================\n THE ACCOUNT NUMBER YOU ENTERED IS NOT REGISTERED \n "
            "=============================== ")
        login()


def register():
    print("REGISTER")
    print("===============================\n")
    email = input("WHAT IS YOUR EMAIL ADDRESS: \n")
    first_name = input("WHAT IS YOUR FIRST NAME: \n")
    last_name = input("WHAT IS YOUR LAST NAME: \n")
    password = input("WHAT IS YOUR PASSWORD: \n")

    accountNumber = generationAccountNumber()
    userDetails = [first_name, last_name, email, password]
    # This parses in the user input details to the database
    database[accountNumber] = userDetails
    # print(database)|

    print("YOUR ACCOUNT HAS BEEN CREATED!")
    print("===============================\n")
    print(f"THIS IS YOUR ACCOUNT NUMBER: {accountNumber} \n")
    print("===============================\n")
    print("YOU CAN LOG IN WITH YOUR DETAILS \n")

    login()


def bankOperation(user):
    print(f"WELCOME {user[0]} {user[1]}")
    print("===============================\n")
    now = datetime.now()
    today = now.strftime("%d/%m/%Y %H:%M:%S")
    print(today)
    print("===============================\n")

    while True:
        try:
            selectedOption = int(input(
                "WHAT WOULD YOU LIKE TO DO? \n =============================== \nRESPOND WITH THE FOLLOWING KEYS: "
                "\n===============================\n "
                "(1). Deposit \n (2). WIthdrawal \n (3). Logout \n (4). Exit\n"))
            break
        except ValueError:
            print("Oops!  That was no valid number.  Try again... \n")

    if selectedOption == 1:
        depositOperation(user)
    elif selectedOption == 2:
        withdrawalOperation(user)
    elif selectedOption == 3:
        logout()
    elif selectedOption == 4:
        exit()
    else:
        print("INVALID OPTION SELECTED, TRY AGAIN")
        bankOperation(user)


def withdrawalOperation(user):
    while True:
        try:
            option_one = int(input("HOW MUCH WOULD YOU LIKE TO WITHDRAW?\n"))
            break
        except ValueError:
            print("Oops!  That was no valid number.  Try again... \n")

    print("===============================\n")
    print(f"TAKE YOUR CASH: #{option_one}")
    print("===============================\n")
    print("THANK YOU FOR BANKING WITH US")

    while True:
        try:
            withdrawalOption = int(input(
                "WOULD YOU LIKE TO CONTINUE YOUR TRANSACTION OR EXIT? \n RESPOND WITH: \n (1) CONTINUE. \n (2). EXIT"))
            break
        except ValueError:
            print("Oops!  That was no valid number.  Try again... \n")
    if withdrawalOption == 1:
        bankOperation(user)
    else:
        exit()


def depositOperation(user):
    while True:
        try:
            option_two = int(input("How much would you like to deposit?\n"))
            break
        except ValueError:
            print("Oops!  That was no valid number.  Try again... \n")

    print(f"You Current balance is: #{option_two}.")

    while True:
        try:
            depositOption = int(input(
                "WOULD YOU LIKE TO CONTINUE YOUR TRANSACTION OR EXIT? \n RESPOND WITH: \n (1) CONTINUE. \n ANY NUMBER "
                "TO EXIT \n"))
            break
        except ValueError:
            print("Oops!  That was no valid number.  Try again... \n")

    if depositOption == 1:
        bankOperation(user)
    else:
        exit()


def generationAccountNumber():
    print("===============================\n")
    print("GENERATING ACCOUNT NUMBER......")
    print("===============================\n")
    # This creates a random 10 digit numbers as the password
    return random.randrange(1111111111, 9999999999)


def logout():
    while True:
        try:
            logoutOption = int(input(
                "PRESS \n (1). TO REGISTER \n (2). TO LOGIN \n OR PRESS ANY OTHER NUMBER TO TERMINATE THE TRANSACTION "
                "\n"))
            break
        except ValueError:
            print("Oops!  That was no valid number.  Try again... \n")

    if logoutOption == 1:
        register()
    elif logoutOption == 2:
        login()
    else:
        exit()


def exit():
    print("===============================")
    print("THANK YOU FOR USING BUSGANDA-MFB")
    print("=============================== \n")


if __name__ == "__main__":
    main()